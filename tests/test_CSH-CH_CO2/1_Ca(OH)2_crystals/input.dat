# Running the code on Enrico's Mac Air
#    /opt/local/bin/mpiexec-mpich-mp -np 1 ./maske input.dat


# ===== SET UNIVERSE OF SUB-COMMUNICATORS ========

# command structure: subcomm Nsubcomms name1 Nproc1 lmp_yes/no seed name2 Nproc2 lammps_yes/no seed .... etc
# NB: the first subcomm should always be lmp_yes, otherwise thermos cannot be produced
subcomm 1 Antonello 1 lmp_yes 123



# ===== READ CHEMISTRY DATA BASE ========

# Load chemistry database file, containing molecule types, reactions, and mechanisms
chemDB ../chemDB.dat



# ===== LIST REAL AND TRIAL PARTICLE TYPES TO BE USED IN THE SIM =======
real_types 1 
trial_types 2
# type 1 = Ca(OH)2 to dissolve, 2 = trial Ca(OH)2 for nucleation


# ========= INITIALISE LAMMPS AND CREATE FIRST PARTICLEs =========

lammps all  	units nano
lammps all 	atom_style sphere
lammps all  	atom_modify map yes   # NEEDED FOR NUCLEATE FIXES!!
lammps all 	boundary p p p
lammps all  	region simbox block 0 7 0 7 0 10 units box
lammps all  	create_box  2 simbox    #make space for enough types when creating box
#lammps all  	read_dump ../../initial_configs/CaOH2/dump.small_ball 5421 x y z box yes add keep	#add atoms keeping their original IDs


# initially, all particles are Ca(OH)2 here, so consistent diameter here
lammps 	all 	variable Diam equal 0.473745541

# equilibrium distance assumes FCC equilibrium packing, with density 0.74
lammps  all 	variable eqDist equal $(v_Diam)*(0.74^(1./3.)) 


# create 2 seeds to crystallize growth
lammps all	variable scale equal sqrt(2)*v_eqDist
lammps all	lattice fcc $(v_scale)  
lammps all	region nuc1 block 2 3 2 3 2 3 units box
lammps all 	create_atoms 1 region nuc1

lammps all	lattice fcc $(v_scale) orient x 1 1 0 orient y 1 -1 0 orient z 0 0 -2
lammps all	region nuc2 block 4 5 4 5 7 8 units box
lammps all 	create_atoms 1 region nuc2

 

lammps all 	set type * diameter $(v_Diam)




#===== Potentials, neighbours, and minimiser style

lammps all   pair_style table linear 4000
lammps all   pair_coeff * * ../../initial_configs/CaOH2/table.potential Spring_Ca(OH)2-Ca(OH)2
lammps all   pair_coeff 1 2 ../../initial_configs/CaOH2/table.potential Spring_Ca(OH)2-CaCO3
#lammps all   pair_coeff 1 3 ../../initial_configs/CaOH2/table.potential Spring_Ca(OH)2-CaCO3
#lammps all   pair_coeff 2 2 ../../initial_configs/CaOH2/table.potential Spring_CaCO3-CaCO3
#lammps all   pair_coeff 2 3 ../../initial_configs/CaOH2/table.potential Spring_CaCO3-CaCO3


#lammps all pair_write 1 2 4000 r 1.00E-030 0.45731 tableOUT.txt Spring_Ca(OH)2-CaCO3


lammps all 	variable skin equal $(v_eqDist)/10.
lammps all  	neighbor $(v_skin) bin
lammps all  	neigh_modify delay 0

# exclude interactions between trial particles 
lammps all  	neigh_modify exclude type 2 2  



# ======== CONSTANTS IN LAMMPS UNITS
kB  0.0138064852       # Boltzmann, in nm2 ag ns-2 K-1
hpl  0.000662607004   # Plank, in nm2 ag / ns




#  ===========   SET INITIAL SOLUTION

# beta CaOH2 =
sol_start uniform 4 H2O 55 Ca+2 0.15 CO3-2 0.0 OH- 0.3 Temp 298 DH_A 0.51 DH_B 3.29 voidV 0 dV iso 1e30 dVvoidV 0  unitC 1e-24


# ======= DISSOLUTION FIXES

# fix KMC-free delete DelCaCH Antonello 1 mech CHdel_apnet sol_in fixed uniform box sol_out uniform box+dV

# fix KMC-free delete DelCaCO3 Antonello 2 mech CaCO3dis_apnet sol_in fixed uniform box sol_out uniform box+dV


# ======= NUCLEATION FIX - approach based on stored regions, lattices, and minimise

# Stored commands are evaluated each time a KMC event is carried out. They can depend on variables which are evaluated during Krun, when the stored quantity is invoked. Hence the variables must exist in the subcomm that invokes the stored quantity during the relevant Krun

# nucleation to be attempted in the whole box
lammps  all	variable 	xl equal xlo+0*$(v_eqDist)
lammps  all	variable 	xr equal xhi-0*$(v_eqDist)
lammps  all	variable 	yl equal ylo+0*$(v_eqDist)
lammps  all	variable 	yr equal yhi-0*$(v_eqDist)
lammps  all	variable 	zl equal zlo+0*$(v_eqDist)
lammps  all	variable 	zr equal zhi-0.*(v_eqDist)
# keeping these less than zlo and zhi to avoid lost atoms
store 	region	RegNuc block $(v_xl) $(v_xr) $(v_yl) $(v_yr) $(v_zl) $(v_zr) units box

lammps  all	variable nx equal 1.5*ceil((xhi-xlo)/$(v_eqDist))
lammps  all	variable ny equal 1.5*ceil((yhi-ylo)/$(v_eqDist))
lammps  all	variable nz equal 1.5*ceil((zhi-zlo)/$(v_eqDist))
lammps	all	variable Lx equal (xhi-xlo)/$(v_nx)
lammps	all	variable Ly equal (yhi-ylo)/$(v_ny)
lammps	all	variable Lz equal (zhi-zlo)/$(v_nz) 
lammps	all	variable scale equal v_Lx
lammps	all	variable aa2 equal v_Ly/v_Lx
lammps	all	variable aa3 equal v_Lz/v_Lx
store 	lattice	latNuc custom $(v_scale) a1 1.0 0.0 0.0 a2 0.0 $(v_aa2) 0.0 a3 0.0 0.0 $(v_aa3) basis 0.5 0.5 0.5

store 	DV	latNuc variable DVnuc equal v_Lx*v_Ly*v_Lz

lammps	all	variable Qdmax equal v_eqDist/200		
store minimize minNuc tstep 0.00045  1e-10 0 600 600 min_modify dmax $(v_Qdmax)

fix KMC-free nucleate NucCH Antonello RegNuc latNuc minNuc 2 1 sphere 0.473745541 wei simple 1 mech CHnuc_apnet sol_in fixed uniform box sol_out uniform box+dV







# ========= DEFINE LAMMPS DUMPS AND THERMOS + VARIABLES ALSO FOR MASKE OUTPUT

lammps all variable N equal atoms
lammps all variable U equal epair
lammps all variable P equal press
lammps all variable Bvol equal vol
 
lammps all variable tyCH atom "type == 1"
lammps all group g_CaOH2 dynamic all var tyCH every 1

lammps all variable NCaOH2 equal count(g_CaOH2)

lammps all variable CHvol equal PI*v_Diam*v_Diam*v_Diam/6
lammps all variable packf equal v_NCaOH2*v_CHvol/v_Bvol

lammps all compute  PEall all pe/atom


# the lammps thermo must calculate all the thermo variables and compute you want to output via the MASKE's thermo
lammps all thermo_style	custom step atoms vol epair press v_NCaOH2 v_packf

lammps all thermo 1000

thermo 10 thermo.txt conc_Ca+2 conc_CO3-2 conc_H2O conc_OH- lmp_v_N lmp_v_U lmp_v_P lmp_v_NCaOH2 lmp_v_packf

dump Antonello D1 10 all     custom  dump.all id type x y z radius c_PEall

# relax every_Nsteps mode args (for minimize, etol ftol maxiter maxeval min_style 
# min_modify_args;  for nvt, all args admitted by an nvt fix in lammps)
#example:      relax 10 minimize 0 0 1000 1000 quickmin dmax .01 20 20 20 
# relax R1 1 minimize 0 0 1000 1000 cg dmax 0.001 20 20 20 


#lammps Antonello dump Dt all custom 1 tdump id type x y z radius
#lammps Antonello dump_modify Dt every 1 first yes

# =============== running the KMC simulation
lammps all print "STARTING KRUN" 
Krun 400000000000000000000


lammps Antonello print "\n SUCCESS \n"

